- name: Install dependencies
  apt:
    state: present
    name: "{{item}}"
    update_cache: true
  with_items:
    - "{{packages}}"

- name: Load required kernel modules
  modprobe:
    name: "{{item}}"
    state: present
  with_items:
    - "{{modules}}"

- name: Save kernel modules in /etc/modules
  lineinfile:
    path: /etc/modules
    line: "{{item}}"
  with_items:
    - "{{modules}}"

- name: Identify the current ethernet interfaces
  set_fact:
    ethernet_interfaces: "{{ ansible_interfaces | difference(['lo']) | map('regex_replace', '^(.*)$', 'ansible_\\1' ) |  map('regex_replace', '[-]+', '_') | map('extract', hostvars[inventory_hostname]) | list }}"

- name: Filter out ethernet interfaces to rename
  set_fact:
    ethernet_to_rename: "{{ ethernet_to_rename | combine({ item.device: ethernet_rename | selectattr('old', 'equalto', item.device) | first | combine({'macaddress': item.macaddress})}) }}"
  with_items:
    - "{{ethernet_interfaces}}"
  when:
     - item.device in ethernet_rename| map(attribute='old') | list

- name: Generate udev rules for changing interfaces names
  template:
    src: rules.j2
    dest: /etc/udev/rules.d/70-persistent-net.rules
  when: (ethernet_to_rename is defined and ethernet_to_rename | length > 0)

- name: Find existing networking config
  find:
    paths: "/etc/network/interfaces.d"
    pattern: "*.cfg"
  register: current_config

- name: Remove existing network config
  file:
    path: "{{item.path}}"
    state: absent
  with_items:
    - "{{current_config.files}}"

- name: Generate the networking configuration
  template:
    src: interfaces.cfg.j2
    dest: /etc/network/interfaces.d/network.cfg

- name: Restart udev
  shell: systemctl restart udev

- name: Reload udev rules per interface
  ignore_errors: yes
  shell:  "ifconfig {{item['old']}} down; udevadm control --reload-rules; udevadm control --reload; udevadm trigger --action=add; udevadm trigger --action=change; udevadm trigger; ifup {{item['new']}}; ifconfig {{item['new']}} up"
  with_items:
    - "{{ethernet_to_rename.values()}}"

- name: Create all required VLAN interfaces
  ignore_errors: yes
  shell: "vconfig add {{item.trunk}}-trunk {{item.vid}}"
  with_items:
    - "{{vlans}}"

- name: Enable rc.local
  systemd:
    name: rc.local
    state: started
    enabled: True

- name: Add VLANs vconfig to rc.local
  lineinfile:
    dest: /etc/rc.local
    insertbefore: "exit 0"
    line: "vconfig add lan-trunk {{item.vid}} || true"
  with_items:
    - "{{vlans}}"

- name: Add udev rules reload to rc.local
  lineinfile:
    dest: /etc/rc.local
    insertbefore: "exit 0"
    line: "ifconfig {{item['old']}} down && udevadm control --reload-rules; udevadm trigger --action=add; udevadm trigger --action=change; udevadm trigger; ifup {{item['new']}}; ifconfig {{item['new']}} up || true"
  with_items:
    - "{{ethernet_to_rename.values()}}"

- name: Get libvirt networks facts
  virt_net:
    command: facts

- name: Undefine the default network if exists
  virt_net:
    command: undefine
    name: default
  when: "{{'default' in ansible_libvirt_networks}}"

- name: Destroy the default network if exists
  virt_net:
    command: destroy
    name: default
  when: "{{'default' in ansible_libvirt_networks}}"

- name: Define the libvirt networks for vlans
  ignore_errors: yes
  virt_net:
    command: define
    name: "br-vlan{{item.vid}}"
    xml: '{{lookup("template", "libvirt-br-vlan.xml.j2")}}'
  with_items:
    - "{{vlans}}"

- name: Start the libvirt networks for vlans
  ignore_errors: yes
  virt_net:
    command: start
    name: "br-vlan{{item.vid}}"
  with_items:
    - "{{vlans}}"

- name: Check the libvirt networks for vlans
  ignore_errors: yes
  virt_net:
    state: active
    name: "br-vlan{{item.vid}}"
  with_items:
    - "{{vlans}}"

- name: Autostart libvirt networks for vlans
  ignore_errors: yes
  virt_net:
    autostart: yes
    name: "br-vlan{{item.vid}}"
  with_items:
    - "{{vlans}}"

- import_tasks: vyos.yml
