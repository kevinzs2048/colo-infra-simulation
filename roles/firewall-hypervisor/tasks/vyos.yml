- name: Check if vyos ISO already exists
  stat:
    path: /home/kevin/vyos-{{vyos_version}}-amd64.iso
  register: iso

- name: Download VyOS ISO if it doesnt exists
  get_url:
    url: https://downloads.vyos.io/release/legacy/{{vyos_version}}/vyos-{{vyos_version}}-amd64.iso
    dest: /home/kevin/
  when: iso.stat.exists == False

- name: Check if vyos vm disk exists
  stat:
    path: /var/lib/libvirt/images/vyos.qcow2
  register: vyos_disk

- name: Create a qcow2 disk image for VyOS
  shell: "qemu-img create -f qcow2 /var/lib/libvirt/images/vyos.qcow2 {{vyos_vm_disk_size}}"
  when: vyos_disk is defined and vyos_disk.stat.exists == False

- name: Define VyOS virtual machine
  virt:
     name: firewall
     command: define
     xml: "{{ lookup('template', 'firewall.xml.j2') }}"

- name: Define VyOS virtual machine
  virt:
     name: firewall
     command: start

- name: Define bridges interfaces
  set_fact:
    bridges: '{{ ethernet_config.keys() | select("match", ".*br.*") | list }}'

- name: Define networks for bridges
  ignore_errors: yes
  virt_net:
    command: define
    name: "{{item}}"
    xml: '{{lookup("template", "libvirt-br.xml.j2")}}'
  with_items:
    - "{{bridges}}"

- name: Start interfaces for bridges
  ignore_errors: yes
  virt_net:
    command: start
    name: "{{item}}"
  with_items:
    - "{{bridges}}"

- name: Check the libvirt networks for bridges
  ignore_errors: yes
  virt_net:
    state: active
    name: "{{item}}"
  with_items:
    - "{{bridges}}"

- name: Autostart libvirt networks for bridges
  ignore_errors: yes
  virt_net:
    autostart: yes
    name: "{{item}}"
  with_items:
    - "{{bridges}}"

- name: Append bridges interfaces
  become: yes
  shell: "virsh domiflist firewall | egrep -E '.*{{item}} .*' -q || virsh attach-interface --domain firewall --type network --source {{item}} --model virtio --live --persistent"
  with_items:
    - "{{bridges}}"

- name: Append VLAN interfaces to the firewall
  shell: "virsh domiflist firewall |  egrep -E '.*br-vlan{{item.vid}} .*' || virsh attach-interface --domain firewall --type network --source br-vlan{{item.vid}} --model virtio --live --persistent"
  with_items:
    - "{{vlans}}"

- name: Gather the current list of mac addresses attached to the VM
  shell: virsh domiflist firewall | awk -F" +" '{printf("%s %s\n", $3, $5); }' | grep -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'
  register: domiflist

- name: Copy the domiflist output to a localfile
  local_action: lineinfile path=firewall-macaddrs line="{{item}}" create=yes state=present
  with_items:
    - "{{domiflist.stdout_lines}}"

#- name: Generate the udev template for interfaces
#  template: 
#    source: "udev-rules.j2"
#    dest: /etc/udev/rules.d/70-persistent-net.rules
